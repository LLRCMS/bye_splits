#+CAPTION: license
#+NAME:   fig:license
[[https://img.shields.io/github/license/bfonta/bye_splits.svg]]

This repository reproduces the CMS HGCAL L1 Stage2 reconstruction chain in Python for quick testing. It can generate an event visualization app. It was originally used for understanding and fixing the observed cluster splitting.

*** Installation & Setup
**** Data production
This framework relies on photon-, electron- and pion-gun samples produced via CRAB. The most up to date versions are currently stored under:

| Photons PU(0)   | ~/dpm/in2p3.fr/home/cms/trivcat/store/user/lportale/DoublePhoton_FlatPt-1To100/GammaGun_Pt1_100_PU0_HLTSummer20ReRECOMiniAOD_2210_BCSTC-FE-studies_v3-29-1_realbcstc4/221025_153226/0000/~        |
| Electrons (PU0) | ~/dpm/in2p3.fr/home/cms/trivcat/store/user/lportale/DoubleElectron_FlatPt-1To100/ElectronGun_Pt1_100_PU200_HLTSummer20ReRECOMiniAOD_2210_BCSTC-FE-studies_v3-29-1_realbcstc4/221102_102633/0000/~ |
| Pions (PU0)     | ~/dpm/in2p3.fr/home/cms/trivcat/store/user/lportale/SinglePion_PT0to200/SinglePion_Pt0_200_PU0_HLTSummer20ReRECOMiniAOD_2210_BCSTC-FE-studies_v3-29-1_realbcstc4/221102_103211/0000~              |

The files above were merged and are stored under =/data_CMS/cms/alves/L1HGCAL/=, accessible to LLR users and under =/eos/user/b/bfontana/FPGAs/new_algos/=, accessible to all lxplus and LLR users. The lat is used since it is well interfaced with CERN services.

**** Skimming: install =yaml-cpp= dependency
To make the size of the files more manageable, a skimming step was implemented in =C++=. It depends on the =yaml-cpp= package ([[https://github.com/jbeder/yaml-cpp][source]],  [[https://github.com/jbeder/yaml-cpp/releases/tag/yaml-cpp-0.7.0][release used]]: version =0.7.0=). The instructions on the =README= page of the project are a bit cryptic. Below follows a step-by-step guide:

#+BEGIN_SRC shell
# 1) Download the 0.7.0 '.zip' release
# 2) Unzip it
unzip yaml-cpp-yaml-cpp-0.7.0.zip
# 3) The package uses CMake for compilation. To avoid cluttering the same folder with many CMake-related files, create a new folder and build the project there
cd yaml-cpp-yaml-cpp-0.7.0
mkdir build
cd build
# 4) Compile a static library (the flag removes a -Werror issue)
cmake -DYAML_CPP_BUILD_TESTS=OFF ..
# 5) Build the package
cmake --build .
# 6) Verify the library 'libyaml-cpp.a' was created
ls -l
# 7) Check the package was correctly installed by compiling a test example (this assumes you have g++ installed):
g++ bye_splits/tests/test_yaml_cpp.cc -I <installation_path_yaml_cpp>/yaml-cpp-yaml-cpp-0.7.0/include/ -L <installation_path_yaml_cpp>/yaml-cpp-yaml-cpp-0.7.0/build/ -std=c++11 -lyaml-cpp -o test_yaml_cpp.o
# 8) Run the executable
./test_yaml_cpp.o
#+END_SRC

The above should print the contents stored in =bye_splits/tests/params.yaml=.

**** Skimming: run
To run the skimming step, you will need to compile the =C++= files stored under =bye_splits/production=.

An additional matching step might be required:

#+BEGIN_SRC shell
python bye_splits/production/matching.py
#+END_SRC

TO BE CONTINUED

**** Reconstruction Chain
The chain is implemented in Python. I recommend creating a separate =conda= environment for running the code.

#+BEGIN_SRC shell
create -n <EnvName> python=3.9 pandas uproot pytables h5py
conda install -c bokeh bokeh
#+END_SRC

Run ~conda activate <EnvName>~ to enter the environment and ~conda deactivate~ to exit it.

You must start from the output of the skimming step above. To replicate the study of TC shifting run the following:

#+BEGIN_SRC shell
bash bye_splits/run_iterative_optimization.sh
#+END_SRC

where one can use the =-h= flag to visualize available options.

For plotting results as a function of the optimization trigger cell parameter:

#+BEGIN_SRC shell
python plot/meta_algorithm.py
#+END_SRC

The above will create =html= files with interactive outputs.

*** Event Visualization
The repository creates two web apps that can be visualized in a browser. The code is stored under =bye_splits/plot=.

**** Visualization in a local browser
Since browser usage directly in the server will necessarily be slow, we can forward it to our local machines via =ssh=. To establish a connection between the local machine and the remote =llruicms01= server, passing by the gate, use:

#+BEGIN_SRC shell
ssh -L <port>:llruicms01.in2p3.fr:<port> -N <llr_username>@llrgate01.in2p3.fr
# for instance: ssh -L 8080:lruicms01.in2p3.fr:8080 -N alves@llrgate01.in2p3.fr
#+END_SRC

The two ports do not have to be the same, but it avoids possible confusion. Leave the terminal open and running (it will not produce any output), and in a new terminal window go to =llruicms01= and launch one of the apps, for instance:

#+BEGIN_SRC shell
bokeh serve bye_splits/plot/display/ --address llruicms01.in2p3.fr --port <port>
#+END_SRC

This uses the server-creation capabilities of =bokeh=, a =python= package for interactive visualization ([[https://docs.bokeh.org/en/latest/index.html][docs]]). Note the port number must match. For further customisation of =bokeh serve= see [[https://docs.bokeh.org/en/latest/docs/reference/command/subcommands/serve.html][the serve documentation]].
The above command should give access to the visualization under =http://localhost:8080/display=.

**** Visualization with OpenShift OKD4

We use the [[https://docs.openshift.com/container-platform/3.11/creating_images/s2i.html][S2I]] (Source to Image) service via CERN's [[https://paas.docs.cern.ch/][PaaS]] (Platform-as-a-Service) suing OpenShift to deploy and host web apps in the CERN computing environment [[https://paas.cern.ch/][here]]. There are three ways to deploys such an app: S2I represents the easiest (but less flexible) of the three; instructions [[https://paas.docs.cern.ch/2._Deploy_Applications/Deploy_From_Git_Repository/2-deploy-s2i-app/][here]]. It effectively abstracts away the need for Dockerfiles.

We will S2I's simplest configuration possible under =app.sh=. The image is created alongside the packages specified in =requirements.txt=. The two latter definitions are documented [[https://github.com/kubesphere/s2i-python-container/blob/master/2.7/README.md#source-repository-layout][here]].

We are currently running a pod at https://viz-hgcal-event-display.app.cern.ch/. The port being served by =bokeh= in =app.sh= must match the one the pod is listening to, specified at configuration time before deployment in the [[https://paas.cern.ch/][OpenShift management console]] at CERN. The [[https://paas.docs.cern.ch/5._Exposing_The_Application/2-network-visibility/][network visibility]] was also updated to allow access from outside the CERN network.

***** Additional information
+ [[https://cloud.google.com/kubernetes-engine/docs/concepts/pod][What is a pod]]?
+ [[https://paas.docs.cern.ch/3._Storage/eos/][How to mount =/eos= at CERN so that it is accessible by a pod?]]


