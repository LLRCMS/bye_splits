#+CAPTION: license
#+NAME:   fig:license
[[https://img.shields.io/github/license/bfonta/bye_splits.svg]]

*** Goal

Understand and fix the observed cluster splitting in the CMS L1 Stage 2 reconstruction on FPGAs.

*** Setup
Start by getting this repository on your work directory. You will need to include a generated public SSH key on GitHub.

#+BEGIN_SRC shell
git clone git@github.com:bfonta/bye_splits.git
#+END_SRC

I recommend creating a separate =conda= environment for running the code.
#+BEGIN_SRC shell
create -n <EnvName> python=3.9 pandas
#+END_SRC

Then run ~conda activate <EnvName>~ to enter the environment before installing dependencies:

#+BEGIN_SRC shell
conda install -c bokeh bokeh
conda install -c conda-forge uproot
conda install -c conda-forge pytables
conda install -c conda-forge h5py
#+END_SRC

You can use ~conda deactivate~ to exit the environment.

You will also need to create two new directories, ~/data~ and ~/out~, on the same level as the second ~bye_splits~ directory (parallel to ~/.git~ if cloned from this repository).

You will need to place the =test_triggergeom.root= file in ~/data~ before running the reconstruction chain.

*** Execute

- Start from =hadd.root= file which gathers trigger cell, cluster and generated information of single photon events without PU [the code required to create this file will be added in this repo in due time]
  
- Produce an intermediated skimmed file with matching applied. This steps is not required if matching is not necessary, but speeds up the folloing step significantly.

#+BEGIN_SRC shell
python bye_splits/production/matching.py
#+END_SRC


- To run the L1 reconstruction chain:

#+BEGIN_SRC shell
bash bye_splits/run_iterative_optimization.sh -r
#+END_SRC

where one can use the =-h= flag to visualize available options. The ~-r~ option (re)processes the trigger cell geometry information and only needs to be passed the first time you run the chain; subsequent runs can be done dropping this option, and the program should run faster.

- For plotting results as a function of the optimization trigger cell parameter:

#+BEGIN_SRC shell
python plot/meta_algorithm.py
#+END_SRC

The above will create =html= files with interactive outputs.
